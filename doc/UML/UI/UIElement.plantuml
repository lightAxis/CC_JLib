@startuml

class UIElement{

    + new(parent: UIElement, screen:Screen, name:string,\n x?:number, y?:number,\n xlen?:number, ylen?:number,\n bg?:Enums.Color, fg?:Enums.Color)

    + setParent(parent: UIElement): void
    + addChild(child: UIElement): void
    + renderChildren(): void
    + isPositionOver(checkPos:Vector2): boolean
    + isPositionOver_Raw(x:number, y:number): boolean
    + triggerClickEvent(button:Enums.MouseButton, pos:Vector2): void
    + triggerScrollEvent(direction: Enums.ScrollDirection, pos:Vector2): void
    + triggerKeyInputEvent(key:Enums.Key): void
    + triggerCharEvent(char:string): void
    ' TODO consider capsulation : Parent, PosRel, Pos, Len, BG, FG, Children, Name, Visible
    + Parent: UIElement
    + PosRel: Vector2
    + Pos: Vector2
    + Len: Vector2
    + BG: Enums.Color
    + FG: Enums.Color
    + Children: table<number,UIElement>
    + Name: string
    + Visible: boolean

    + {abstract} render(): void <<pure>>
    + {abstract} PostRendering(): void <<pure>>
    + {abstract} FocusIn(): void <<pure>>
    + {abstract} FocusOut(): void <<pure>>

    # _updatePos(): void
    # _updateLengthFromParent(): void
    # _addThisToRenderHistory(): void
    # _ClickEventBubbling(e:ClickEventArgs): void
    # _ScrollEventBubbling(e:ScrollEventArgs): void
    # _KeyInputBubbling(e:KeyInputEventArgs): void
    # _CharEventBubbling(e:CharEventArgs): void
    # _screen: Screen

    # {abstract} _ClickEvent(e:ClickEventArgs): void <<pure>>
    # {abstract} _ScrollEvent(e:ScrollEventArgs): void <<pure>>
    # {abstract} _KeyInputEvent(e:KeyInputEventArgs): void <<pure>>
    # {abstract} _CharEvent(e:CharEventArgs): void <<pure>>
}

@enduml