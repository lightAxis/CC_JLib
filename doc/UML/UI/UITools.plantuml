@startuml

class UITools<<static>>{

+ Pos2Len(pmin:number, pmax:number): number
+ Len2Pos_FromStart(startAt:number, len:number): Vector2
+ Len2Pos_FromEnd(endAt:number, len:number): Vector2
+ calcHorizontalAlignPos(min:number, max:number, len:number, mode:Enums.HorizontalAlignmentMode): number
+ calcVerticalAlignPos(min:number, max:number, len:number, mode:Enums.HorizontalAlignmentMode): number
+ calcRelativeOffset(origin:Vector2, offset:Vector2): Vector2
+ calcRelativeOffset_X(origin:Vector2, offset_x:number): Vector2
+ calcRelativeOffset_Y(origin:Vector2, offset_y:number): Vector2
+ calcRelativeOffset_Raw(origin:number, offset:number): number
+ transformGlobalPos2LocalPos(globalPos:Vector2, localOrigin:Vector2): Vector2
+ transformLocalPos2GlobalPos(localPos:Vector2, localOrigin:Vector2): Vector2
+ transformGlobalIndex2LocalIndex(globalIndex:number, localOrigin:number): number
+ transformLocalIndex2GlobalIndex(localIndex:number, localOrigin:number): number
+ isInsideSquare(pos:Vector2, len:Vector2, checkpos:Vector2): boolean
+ isInsideSquare_Raw(pos_x, pos_y, len_x, len_y, checkpos_x,checkpos_y): boolean
+ getEmptyString(len:number): string
+ drawLine_x(screen:Screen, startPos:Vector2, len:number, bg:Enums.Color): void
+ drawLine_y(screen:Screen, startPos:Vector2, len:number, bg:Enums.Color): void
+ constrain(number:number, min:number, max:number): number

}

@enduml