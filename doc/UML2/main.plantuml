@startuml ClassDiagram

set NamespaceSeparator ::

' skinparam linetype polyline
' skinparam linetype ortho
skinparam groupInheritance 2

hide empty members

package JLib{
    package Class{
        class middleclass
    }

    package LibGlobal
    {
        enum eEnvironment

        class LibVariables<<static>>{
            + ENVIRONMENT: eEnvironment
        }
        class StaticMethods<<static>>{
            + string:split(delimeter:string): string
        }
    }

    package MathLib{
        class Vector2
        class Vector3
    }
    package EventRouter{
        class Router
        enum Events
    }

    package UI{
        package UIEvent{
            class EventArgs
            class ClickEventArgs extends EventArgs
            class ScrollEventArgs extends EventArgs
            class KeyInputEventArgs extends EventArgs
            class CharEventArgs extends EventArgs
        }

        package Enums{
            enum VerticalAlignmentMod
            enum HorizontalAlignmentMode
            enum Side
            enum MouseButton
            enum ScrollDirection
            enum Key
            enum KeyReverse
            enum Color
            enum Blit
            enum BlitReverse

        }


        class UIRunner{
            + FocusedElement : UIElement
            + Scens : List<Enums.Side, Screen>
            + attachScene()
            + detachScene()
            + RenderScreen()
            + Reflect2Screen()
        }
        class UIScene{
            + attachingScreen:Screen
            + rootScreenCanvas:ScreenCanvas
        }
        class UITools <<tool>>
        class Screen{
            + getUIAtPos()
            + write()
            + blit()
            + render()
            + reflec2Screen()
        }

        package UIElementGroup{
            class UIElement{
                + Parent : UIElement
                - _screen : Screen
                + addChild()
                + isPositionOver():boolean
                + triggerClickEvent()
                + triggerScrollEvent()
                + triggerKeyInputEvent()
                + triggerCharEvent()

                + {abstract} render()
                + {abstract} PostRendering()
                + {abstract} FocusIn()
                + {abstract} FocusOut()
                
                # {abstract} _ClickEvent()
                # {abstract} _ScrollEvent()
                # {abstract} _KeyInputEvent()
                # {abstract} _CharEvent()
                
                
            }
            class Grid
            class Border{
                + BorderThickness
                + BorderColor
            }
            class Button{
                + IsToggleable
                + IsButtonPressed
                + BGPressed
                + FGPressed
            }
            class ListBox{
                + setItemTemplate()
                + setItemSource()
                + setScroll()
                + Refresh()
                - _ItemSource: List<any>
                - _Items: List<ListboxItem>
            }
            class ListBoxItem{
                + obj: any
                + _IsSelected
            }
            class Margin{
                + MarginLeft
                + MarginRight
                + MarginTop
                + MarginBottom
            }
            class ScreenCanvas{
                - _updateLengthFromScreen()
            }
            class TextArea{
                + setText()
                + setScroll()
                + IsTextEditable
                + setVerticalAlignment()
                + setHorizontalAlignment()
            }
            class TextBlock
        }

    }
}

MathLib ...> Class : <<constrcutor>>

EventRouter ...> Class : <<constrcutor>>
EventRouter ...> UIRunner : <<parameter>>

UI ...> Class : <<constrcutor>>
UI ...> MathLib :: <<create, local, parameter>>

UIRunner "1" o--->  UIElement : Run UIEvents >
UIRunner "1..*" o--->  UIScene :  Render&Parse UIElement > 
UIRunner ...> Enums : <<parameter>>
UIRunner ..left..> UIEvent : <<parameter>>

UIScene "1" o--->  Screen : Render&Parse UIElement >
UIScene "1" *--->  ScreenCanvas : Generate UIElementTree >

UIElementGroup ...> UIEvent : <<parameter>>
UIElementGroup ...> Enums : <<parameter>>
UIElementGroup "1" o--up--> Screen : Draw >

UIElement <|-right- ScreenCanvas
UIElement <|-- ListBoxItem
UIElement <|-- Margin
UIElement <|-- Border
UIElement <|-- TextArea
UIElement <|-- TextBlock
UIElement <|-- ListBox

TextBlock "1" *--> Border
TextBlock "1" *--> Margin
TextBlock "1" *--> TextArea
TextBlock <|-- Button

ListBox "0..*" *--> ListBoxItem

ListBoxItem "1" *--> TextArea




@enduml